name: Trigger cicd pipeline
description: Trigger a Bitbucket CI/CD pipeline through the API.
implementation:
  container:
    image: europe-west2-docker.pkg.dev/robertofierimonte-ml-pipe/docker-repo/bitbucket-cicd
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'loguru==0.6.0' 'requests==2.30.0' 'kfp==1.8.22' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def trigger_cicd_pipeline() -> None:
          """Trigger a Bitbucket CI/CD pipeline through the API."""
          import base64
          import json
          import os

          import requests
          from loguru import logger

          workspace = os.environ.get("BITBUCKET_WORKSPACE")
          repo_slug = os.environ.get("BITBUCKET_REPO_SLUG")
          url = (
              f"https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/"
          )

          bearer_token = base64.b64decode(os.environ.get("BITBUCKET_CICD_TOKEN")).decode(
              "utf-8"
          )
          headers = {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "Authorization": f"Bearer {bearer_token}",
          }

          payload = json.dumps(
              {
                  "target": {
                      "ref_type": "branch",
                      "type": "pipeline_ref_target",
                      "ref_name": "master",
                  }
              }
          )

          response = requests.request("POST", url, headers=headers, data=payload)

          logger.info(
              json.dumps(
                  json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")
              )
          )

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - trigger_cicd_pipeline
