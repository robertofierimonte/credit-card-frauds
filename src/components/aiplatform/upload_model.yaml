name: Upload model
description: Upload a model from GCS to the Vertex AI model registry.
inputs:
- {name: model_id, type: String, description: The ID (name) of the model.}
- {name: display_name, type: String, description: The display name of the model. The
    name}
- name: serving_container_image_uri
  type: String
  description: |-
    The URI of the model serving container.
    Must come from the GCP Container Registry or Artifact Registry.
- {name: project_id, type: String, description: GCP Project ID where the model will
    be saved.}
- {name: project_location, type: String, description: Location where the model will
    be saved.}
- {name: model, type: Model, description: Model to be uploaded.}
- {name: labels, type: JsonObject, description: Labels with user-defined metadata
    to organise the model.}
- {name: description, type: String, description: Description of the model.}
- name: is_default_version
  type: Boolean
  description: |-
    When set to True, the newly uploaded model version
    will automatically have alias "default" included. When set to False, the
    "default" alias will not be moved
- name: version_description
  type: String
  description: |-
    Description of the version of the model being
    uploaded.
- name: version_alias
  type: JsonArray
  description: |-
    User provided version alias so that a model
    version can be referenced via alias instead of auto-generated version ID.
    Defaults to None.
  default: '[]'
  optional: true
- {name: model_name, type: String, description: '', optional: true}
outputs:
- {name: Output, type: String}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform==1.26.0' 'loguru==0.7.0' 'kfp==1.8.22' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef upload_model(\n    model_id: str,\n    display_name: str,\n\
      \    serving_container_image_uri: str,\n    project_id: str,\n    project_location:\
      \ str,\n    model: Input[Model],\n    labels: dict,\n    description: str,\n\
      \    is_default_version: bool,\n    version_description: str,\n    version_alias:\
      \ list = [],\n    model_name: str = None,\n) -> str:\n    \"\"\"Upload a model\
      \ from GCS to the Vertex AI model registry.\n\n    Args:\n        model_id (str):\
      \ The ID (name) of the model.\n        display_name (str): The display name\
      \ of the model. The name\n        serving_container_image_uri (str): The URI\
      \ of the model serving container.\n            Must come from the GCP Container\
      \ Registry or Artifact Registry.\n        project_id (str): GCP Project ID where\
      \ the model will be saved.\n        project_location (str): Location where the\
      \ model will be saved.\n        model (Input[Model]): Model to be uploaded.\n\
      \        labels (dict): Labels with user-defined metadata to organise the model.\n\
      \        description (str): Description of the model.\n        is_default_version\
      \ (bool): When set to True, the newly uploaded model version\n            will\
      \ automatically have alias \"default\" included. When set to False, the\n  \
      \          \"default\" alias will not be moved\n        version_description\
      \ (str): Description of the version of the model being\n            uploaded.\n\
      \        version_alias (str, optional): User provided version alias so that\
      \ a model\n            version can be referenced via alias instead of auto-generated\
      \ version ID.\n            Defaults to None.\n        model_name (str, optional):\
      \ \n\n    Returns:\n        str: Resource name of the exported model\n    \"\
      \"\"\n    from google.api_core.exceptions import NotFound\n    from google.cloud.aiplatform\
      \ import Model\n    from loguru import logger\n\n    # The URI expects a folder\
      \ containing the model binaries\n    model_uri = model.uri.rsplit(\"/\", 1)[0]\n\
      \n    # If a model with the same id exists, use it as the parent model\n   \
      \ try:\n        result_model = Model(\n            model_name=model_id, project=project_id,\
      \ location=project_location\n        )\n        parent_model = result_model.resource_name\n\
      \    except (NotFound, ValueError):\n        logger.info(\"Parent model not\
      \ found.\")\n        parent_model = None\n\n    if \"data_version\" in labels:\n\
      \        labels[\"data_version\"] = labels[\"data_version\"].replace(\"T\",\
      \ \"\")\n    if model_name is not None:\n        version_alias.append(\n   \
      \         f\"{model_name.replace('_', '-')}-{labels.get('timestamp', 'no-timestamp')}\"\
      \n        )\n    if version_alias == []:\n        version_alias = None\n\n \
      \   logger.debug(f\"Version aliases: {version_alias}\")\n    logger.debug(f\"\
      Labels: {labels}\")\n    logger.info(\"Uploading model to model registry.\"\
      )\n    model = Model.upload(\n        model_id=model_id,\n        project=project_id,\n\
      \        location=project_location,\n        display_name=display_name,\n  \
      \      parent_model=parent_model,\n        version_aliases=version_alias,\n\
      \        is_default_version=is_default_version,\n        serving_container_image_uri=serving_container_image_uri,\n\
      \        artifact_uri=model_uri,\n        description=description,\n       \
      \ version_description=version_description,\n        labels=labels,\n       \
      \ sync=True,\n    )\n    logger.info(f\"Uploaded model {model}.\")\n    return\
      \ model.resource_name\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - upload_model
