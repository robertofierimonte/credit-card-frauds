name: Predict model
description: Use a trained model to make batch prediction on new data.
inputs:
- {name: input_data, type: Dataset, description: Testing data as a KFP Dataset object.}
- {name: model, type: Model, description: Input trained model as a KFP Model object.}
outputs:
- name: predictions
  type: Dataset
  description: |-
    Model predictions including input columns
    as a KFP Dataset object. This parameter will be passed automatically
    by the orchestrator.
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'scikit-learn==1.1.2' 'pandas==1.4.3' 'joblib==1.2.0' 'kfp==1.8.22' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def predict_model(
          input_data: Input[Dataset],
          model: Input[Model],
          predictions: Output[Dataset],
      ) -> None:
          """Use a trained model to make batch prediction on new data.

          Args:
              input_data (Input[Dataset]): Testing data as a KFP Dataset object.
              model (Input[Model]): Input trained model as a KFP Model object.
              predictions (Output[Dataset]): Model predictions including input columns
                  as a KFP Dataset object. This parameter will be passed automatically
                  by the orchestrator.
          """
          import joblib
          import pandas as pd

          dtc = joblib.load(model.path)

          df_test = pd.read_csv(input_data.path)

          preds = dtc.predict(df_test)
          df_test["pred"] = preds
          df_test.to_csv(predictions.path, index=False)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - predict_model
