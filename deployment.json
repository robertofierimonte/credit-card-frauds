{
  "components": {
    "comp-deploy-model": {
      "executorLabel": "exec-deploy-model",
      "inputDefinitions": {
        "parameters": {
          "dataset_id": {
            "parameterType": "STRING"
          },
          "endpoint_display_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "endpoint_id": {
            "parameterType": "STRING"
          },
          "model_display_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_id": {
            "parameterType": "STRING"
          },
          "model_label": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "monitoring": {
            "defaultValue": true,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "project_id": {
            "parameterType": "STRING"
          },
          "project_location": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-exit-handler-1": {
      "dag": {
        "tasks": {
          "deploy-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-deploy-model"
            },
            "dependentTasks": [
              "upload-model"
            ],
            "inputs": {
              "parameters": {
                "dataset_id": {
                  "componentInputParameter": "pipelinechannel--dataset_id"
                },
                "endpoint_id": {
                  "runtimeValue": {
                    "constant": "credit-card-frauds-endpoint"
                  }
                },
                "model_id": {
                  "runtimeValue": {
                    "constant": "credit-card-frauds-champion"
                  }
                },
                "project_id": {
                  "componentInputParameter": "pipelinechannel--project_id"
                },
                "project_location": {
                  "componentInputParameter": "pipelinechannel--project_location"
                }
              }
            },
            "taskInfo": {
              "name": "Deploy new champion"
            }
          },
          "export-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-export-model"
            },
            "inputs": {
              "parameters": {
                "model_file_name": {
                  "runtimeValue": {
                    "constant": "model"
                  }
                },
                "model_id": {
                  "runtimeValue": {
                    "constant": "credit-card-frauds-challenger"
                  }
                },
                "project_id": {
                  "componentInputParameter": "pipelinechannel--project_id"
                },
                "project_location": {
                  "componentInputParameter": "pipelinechannel--project_location"
                }
              }
            },
            "taskInfo": {
              "name": "Export challenger"
            }
          },
          "merge-dicts": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-merge-dicts"
            },
            "dependentTasks": [
              "export-model"
            ],
            "inputs": {
              "parameters": {
                "dict1": {
                  "taskOutputParameter": {
                    "outputParameterKey": "labels",
                    "producerTask": "export-model"
                  }
                },
                "dict2": {
                  "runtimeValue": {
                    "constant": {
                      "commit_tag": "no_tag"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Add git tag to challenger labels"
            }
          },
          "upload-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-upload-model"
            },
            "dependentTasks": [
              "export-model",
              "merge-dicts"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "export-model"
                  }
                }
              },
              "parameters": {
                "description": {
                  "runtimeValue": {
                    "constant": "Credit card frauds champion model"
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constant": "credit-card-frauds-champion"
                  }
                },
                "is_default_version": {
                  "runtimeValue": {
                    "constant": true
                  }
                },
                "labels": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "merge-dicts"
                  }
                },
                "model_id": {
                  "runtimeValue": {
                    "constant": "credit-card-frauds-champion"
                  }
                },
                "project_id": {
                  "componentInputParameter": "pipelinechannel--project_id"
                },
                "project_location": {
                  "componentInputParameter": "pipelinechannel--project_location"
                },
                "serving_container_image_uri": {
                  "runtimeValue": {
                    "constant": "europe-west2-docker.pkg.dev/robertofierimonte-ml-pipe/docker-repo/credit-card-frauds:feature-deploy-pipeline"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Crown challenger to champion"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "pipelinechannel--dataset_id": {
            "parameterType": "STRING"
          },
          "pipelinechannel--project_id": {
            "parameterType": "STRING"
          },
          "pipelinechannel--project_location": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-export-model": {
      "executorLabel": "exec-export-model",
      "inputDefinitions": {
        "parameters": {
          "model_file_name": {
            "description": "File name of the model inside the model folder.\nDefaults to None.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_id": {
            "parameterType": "STRING"
          },
          "model_label": {
            "description": "Version alias of the model. Defaults to None.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "description": "GCP Project ID where the model is stored.",
            "parameterType": "STRING"
          },
          "project_location": {
            "description": "Location where the model is stored.",
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "labels": {
            "parameterType": "STRUCT"
          }
        }
      }
    },
    "comp-merge-dicts": {
      "executorLabel": "exec-merge-dicts",
      "inputDefinitions": {
        "parameters": {
          "dict1": {
            "description": "First dict.",
            "parameterType": "STRUCT"
          },
          "dict2": {
            "description": "Second dict.",
            "parameterType": "STRUCT"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRUCT"
          }
        }
      }
    },
    "comp-upload-model": {
      "executorLabel": "exec-upload-model",
      "inputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            },
            "description": "Model to be uploaded."
          }
        },
        "parameters": {
          "data_version": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "description": {
            "description": "Description of the model.",
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The display name of the model. The name",
            "parameterType": "STRING"
          },
          "is_default_version": {
            "description": "When set to True, the newly uploaded model version\nwill automatically have alias \"default\" included. When set to False, the\n\"default\" alias will not be moved.",
            "parameterType": "BOOLEAN"
          },
          "labels": {
            "description": "Labels with user-defined metadata to organise the model.",
            "parameterType": "STRUCT"
          },
          "model_id": {
            "description": "The ID (name) of the model.",
            "parameterType": "STRING"
          },
          "model_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "pipeline_timestamp": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "description": "GCP Project ID where the model will be saved.",
            "parameterType": "STRING"
          },
          "project_location": {
            "description": "Location where the model will be saved.",
            "parameterType": "STRING"
          },
          "serving_container_image_uri": {
            "description": "The URI of the model serving container.\nMust come from the GCP Container Registry or Artifact Registry.",
            "parameterType": "STRING"
          },
          "version_alias": {
            "defaultValue": [],
            "description": "User provided version alias so that a model\nversion can be referenced via alias instead of auto-generated version ID.\nDefaults to [].",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "version_description": {
            "description": "Description of the version of the model\nbeing uploaded. Defaults to None.",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-vertex-pipelines-notification-email": {
      "executorLabel": "exec-vertex-pipelines-notification-email",
      "inputDefinitions": {
        "parameters": {
          "pipeline_task_final_status": {
            "isOptional": true,
            "parameterType": "TASK_FINAL_STATUS"
          },
          "recipients": {
            "description": "A list of email addresses to send a notification to.",
            "parameterType": "LIST"
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-deploy-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "deploy_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform==1.26.1' 'loguru==0.7.0' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef deploy_model(\n    model_id: str,\n    endpoint_id: str,\n    project_location: str,\n    project_id: str,\n    dataset_id: str,\n    model_display_name: str = None,\n    endpoint_display_name: str = None,\n    model_label: str = None,\n    monitoring: bool = True,\n) -> None:\n    from google.api_core.exceptions import NotFound\n    from google.cloud import aiplatform\n    from google.cloud.aiplatform import (  # model_monitoring,\n        Endpoint,\n        Model,\n        ModelDeploymentMonitoringJob,\n    )\n    from loguru import logger\n\n    aiplatform.init(project=project_id, location=project_location)\n\n    if model_display_name is None:\n        model_display_name = model_id\n    if endpoint_display_name is None:\n        endpoint_display_name = endpoint_id\n\n    try:\n        model = Model(\n            model_name=model_id,\n            project=project_id,\n            location=project_location,\n            version=model_label,\n        )\n        logger.info(f\"Found model {model_id}, version {model_label}.\")\n    except NotFound:\n        msg = f\"No model found with name {model_id}, version {model_label}.\"\n        logger.error(msg)\n        raise RuntimeError(msg)\n\n    try:\n        endpoint = Endpoint(endpoint_name=endpoint_id)\n        logger.info(f\"Found existing endpoint {endpoint_id}.\")\n        endpoint.undeploy_all()\n        logger.info(\"Undeployed all models from existing endpoint.\")\n\n        for monitoring_job in ModelDeploymentMonitoringJob.list():\n            if monitoring_job.name == endpoint.name:\n                ModelDeploymentMonitoringJob.delete(monitoring_job)\n        logger.info(\"Deleted all monitoring jobs from existing endpoint.\")\n    except NotFound:\n        endpoint = Endpoint.create(\n            display_name=endpoint_display_name,\n            enable_request_response_logging=True,\n            request_response_logging_sampling_rate=1.,\n            request_response_logging_bq_destination_table=(\n                f\"bq://{project_id}.{dataset_id}.endpoint_logging\"\n            )\n        )\n        logger.info(f\"Created endpoint {endpoint_display_name}.\")\n\n    model.deploy(endpoint=endpoint, deployed_model_display_name=model_display_name)\n    logger.info(f\"Deployed model {model_display_name} to \")\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-export-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "export_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform==1.26.1' 'loguru==0.7.0' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef export_model(\n    model_id: str,\n    project_id: str,\n    project_location: str,\n    model: Output[Model],\n    model_label: str = None,\n    model_file_name: str = None,\n) -> NamedTuple(\"Outputs\", [(\"labels\", dict)]):\n    \"\"\"Export a Vertex AI model from the model registry to GCS.\n\n    Args:\n        model_name (str): The ID (name) of the model.\n        project_id (str): GCP Project ID where the model is stored.\n        project_location (str): Location where the model is stored.\n        model (Output[Model]): The exported model as a KFP Model object. This\n            parameter will be passed automatically by the orchestrator.\n        model_label (str, optional): Version alias of the model. Defaults to None.\n        model_file_name (str, optional): File name of the model inside the model folder.\n            Defaults to None.\n    \"\"\"\n    from google.cloud.aiplatform import Model\n    from loguru import logger\n\n    model_to_be_exported = Model(\n        model_name=model_id,\n        project=project_id,\n        location=project_location,\n        version=model_label,\n    )\n    result = model_to_be_exported.export_model(\n        export_format_id=\"custom-trained\", artifact_destination=model.uri, sync=True\n    )\n\n    model.path = result[\"artifactOutputUri\"]\n    if model_file_name:\n        model.path += f\"/{model_file_name}\"\n    model.metadata[\"resourceName\"] = model_id\n    # model.metadata[\"model_labels\"] = model_to_be_exported.labels[\"model_label\"]\n    logger.info(f\"Exported model to {model.path}.\")\n\n    return (model_to_be_exported.labels,)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-merge-dicts": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "merge_dicts"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef merge_dicts(dict1: dict, dict2: dict) -> dict:\n    \"\"\"Merge two dicts.\n\n    Args:\n        dict1 (dict): First dict.\n        dict2 (dict): Second dict.\n\n    Returns:\n        dict: Merged dict.\n    \"\"\"\n    return dict1 | dict2\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-upload-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "upload_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform==1.26.1' 'loguru==0.7.0' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef upload_model(\n    model_id: str,\n    display_name: str,\n    serving_container_image_uri: str,\n    project_id: str,\n    project_location: str,\n    model: Input[Model],\n    labels: dict,\n    description: str,\n    is_default_version: bool,\n    version_description: str = None,\n    version_alias: list = [],\n    pipeline_timestamp: str = None,\n    data_version: str = None,\n    model_name: str = None,\n) -> str:\n    \"\"\"Upload a model from GCS to the Vertex AI model registry.\n\n    Args:\n        model_id (str): The ID (name) of the model.\n        display_name (str): The display name of the model. The name\n        serving_container_image_uri (str): The URI of the model serving container.\n            Must come from the GCP Container Registry or Artifact Registry.\n        project_id (str): GCP Project ID where the model will be saved.\n        project_location (str): Location where the model will be saved.\n        model (Input[Model]): Model to be uploaded.\n        labels (dict): Labels with user-defined metadata to organise the model.\n        description (str): Description of the model.\n        is_default_version (bool): When set to True, the newly uploaded model version\n            will automatically have alias \"default\" included. When set to False, the\n            \"default\" alias will not be moved.\n        version_description (str, optional): Description of the version of the model\n            being uploaded. Defaults to None.\n        version_alias (str, optional): User provided version alias so that a model\n            version can be referenced via alias instead of auto-generated version ID.\n            Defaults to [].\n        pipeline_timestamp (str, optional):\n        data_version (str, optional):\n        model_name (str, optional):\n\n    Returns:\n        str: Resource name of the exported model\n    \"\"\"\n    from google.api_core.exceptions import NotFound\n    from google.cloud.aiplatform import Model\n    from loguru import logger\n\n    # The URI expects a folder containing the model binaries\n    model_uri = model.uri.rsplit(\"/\", 1)[0]\n\n    # If a model with the same id exists, use it as the parent model\n    try:\n        result_model = Model(\n            model_name=model_id, project=project_id, location=project_location\n        )\n        parent_model = result_model.resource_name\n    except (NotFound, ValueError):\n        logger.info(\"Parent model not found.\")\n        parent_model = None\n\n    if data_version is not None:\n        labels[\"data_version\"] = data_version.replace(\"T\", \"\")\n    if pipeline_timestamp is not None:\n        labels[\"pipeline_timestamp\"] = pipeline_timestamp.replace(\"T\", \"\")\n    if model_name is not None:\n        version_alias.append(\n            f\"{model_name.replace('_', '-')}-{labels.get('timestamp', 'no-timestamp')}\"\n        )\n        labels[\"model_name\"] = model_name\n    if version_alias == []:\n        version_alias = None\n\n    logger.debug(f\"Version aliases: {version_alias}\")\n    logger.debug(f\"Labels: {labels}\")\n    logger.info(\"Uploading model to model registry.\")\n    model = Model.upload(\n        model_id=model_id,\n        project=project_id,\n        location=project_location,\n        display_name=display_name,\n        parent_model=parent_model,\n        version_aliases=version_alias,\n        is_default_version=is_default_version,\n        serving_container_image_uri=serving_container_image_uri,\n        artifact_uri=model_uri,\n        description=description,\n        version_description=version_description,\n        labels=labels,\n        sync=True,\n    )\n    logger.info(f\"Uploaded model {model}.\")\n    return model.resource_name\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-vertex-pipelines-notification-email": {
        "container": {
          "args": [
            "--type",
            "VertexNotificationEmail",
            "--payload",
            ""
          ],
          "command": [
            "python3",
            "-u",
            "-m",
            "google_cloud_pipeline_components.container.v1.vertex_notification_email.executor"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.0.0"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "Credit card frauds deployment Pipeline",
    "name": "frauds-deployment-pipeline-no-tag"
  },
  "root": {
    "dag": {
      "tasks": {
        "exit-handler-1": {
          "componentRef": {
            "name": "comp-exit-handler-1"
          },
          "inputs": {
            "parameters": {
              "pipelinechannel--dataset_id": {
                "componentInputParameter": "dataset_id"
              },
              "pipelinechannel--project_id": {
                "componentInputParameter": "project_id"
              },
              "pipelinechannel--project_location": {
                "componentInputParameter": "project_location"
              }
            }
          },
          "taskInfo": {
            "name": "Notify pipeline result"
          }
        },
        "vertex-pipelines-notification-email": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-vertex-pipelines-notification-email"
          },
          "dependentTasks": [
            "exit-handler-1"
          ],
          "inputs": {
            "parameters": {
              "pipeline_task_final_status": {
                "taskFinalStatus": {
                  "producerTask": "exit-handler-1"
                }
              },
              "recipients": {
                "componentInputParameter": "email_notification_recipients"
              }
            }
          },
          "taskInfo": {
            "name": "vertex-pipelines-notification-email"
          },
          "triggerPolicy": {
            "strategy": "ALL_UPSTREAM_TASKS_COMPLETED"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "data_version": {
          "description": "_description_",
          "parameterType": "STRING"
        },
        "dataset_id": {
          "description": "_description_",
          "parameterType": "STRING"
        },
        "dataset_location": {
          "description": "_description_",
          "parameterType": "STRING"
        },
        "email_notification_recipients": {
          "description": "_description_",
          "parameterType": "LIST"
        },
        "project_id": {
          "description": "_description_",
          "parameterType": "STRING"
        },
        "project_location": {
          "description": "_description_",
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.0.1"
}
