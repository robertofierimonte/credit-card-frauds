image: robertofierimonte/data-science-base-image:latest

definitions:
  caches:
    poetry:
      key:
        files:
          - poetry.lock
      path: $BITBUCKET_CLONE_DIR/.venv

  steps:
    - step: &set-env-vars
        name: Set environment variables
        script:
          - echo export ARTIFACT_REGISTRY_REPO=europe-west2-docker.pkg.dev/$GCLOUD_PROJECT_ID/docker-repo >> .env
          - echo export VERTEX_LOCATION=europe-west2 >> .env
          - echo export VERTEX_PROJECT_ID=$GCLOUD_PROJECT_ID >> .env
          - echo export BASE_IMAGE_NAME=$BITBUCKET_REPO_SLUG >> .env
          - echo export DEVELOPMENT_STAGE=pre-prod >> .env
          - echo export VERTEX_TRIGGER_MODE=run >> .env
          - echo export MONITORING_EMAIL_ADDRESS=$MONITORING_EMAIL_ADDRESS >> .env
          - echo export GOOGLE_APPLICATION_CREDENTIALS=$BITBUCKET_CLONE_DIR/key.json >> .env
          - echo export IMAGE_NAME=europe-west2-docker.pkg.dev/$GCLOUD_PROJECT_ID/docker-repo/$BITBUCKET_REPO_SLUG:latest >> .env
        artifacts:
          - .env
    - step: &compile-pipelines
        name: Compile KFP pipelines
        script:
          - source .env
          - poetry config virtualenvs.in-project true
          - poetry install --only cicd
          - make compile pipeline=training
          - make compile pipeline=deployment
        caches:
          - poetry
        artifacts:
          - training.json
          - deployment.json
    - step: &run-unit-tests
        name: Run unit tests
        script:
          - source .env
          - poetry config virtualenvs.in-project true
          - poetry install --only base,test,cicd
          - make pre-commit
          - make unit-tests
        caches:
          - poetry
        artifacts:
          - unit-tests.xml

pipelines:
  default:
    - step: *set-env-vars
    - step: *run-unit-tests
  branches:
    master:
    - step: *set-env-vars
    - step: *run-unit-tests
    - parallel:
        steps:
          - step: *compile-pipelines
          - step:
              name: Build base image
              services:
                - docker
              script:
                - source .env
                - echo $TF_SERVICE_ACCOUNT_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
                - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS} --verbosity error
                - gcloud auth configure-docker europe-west2-docker.pkg.dev --verbosity error
                - >-
                  docker build
                  --build-arg BUILDKIT_INLINE_CACHE=1
                  --cache-from ${IMAGE_NAME}:latest
                  --tag ${IMAGE_NAME}
                  --tag ${ARTIFACT_REGISTRY_REPO}/${BASE_IMAGE_NAME}:${BITBUCKET_COMMIT:0:7}
                  -f ./containers/base/Dockerfile
                  .
                - docker push --all-tags ${ARTIFACT_REGISTRY_REPO}/${BASE_IMAGE_NAME}
    - step:
        name: Run training pipeline
        script:
          - source .env
          - echo $TF_SERVICE_ACCOUNT_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS --verbosity error
          - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS} --verbosity error
          - poetry config virtualenvs.in-project true
          - poetry install --only cicd
          - make run pipeline=training enable-caching=false environment=prod
