image: robertofierimonte/data-science-base-image:latest

definitions:
  commonItems: &config-poetry
    source .env &&
    pip install --upgrade pip --quiet &&
    pip install poetry==1.6.1 --quiet &&
    poetry config virtualenvs.in-project true &&
    poetry env use $PYENV_ROOT/versions/$PYTHON_VERSION/bin/python

  caches:
    poetry:
      key:
        files:
          - poetry.lock
      path: $BITBUCKET_CLONE_DIR/.venv

    pyenv:
      key:
        files:
          - .python-version
      path: $BITBUCKET_CLONE_DIR/.pyenv

    pre-commit:
      key:
        files:
          - .pre-commit-config.yaml
      path: $BITBUCKET_CLONE_DIR/.pre-commit

  steps:
    - step: &set-env-vars
        name: Set environment variables
        script:
          - echo export DOCKER_REPO=docker-repo >> .env
          - echo export VERTEX_TRIGGER_MODE=run >> .env
          - echo export MONITORING_EMAIL_ADDRESS=$MONITORING_EMAIL_ADDRESS >> .env
          - echo export GOOGLE_APPLICATION_CREDENTIALS=$BITBUCKET_CLONE_DIR/key.json >> .env
          - echo export PYTHON_VERSION=$(cat .python-version) >> .env
          - echo export PYENV_ROOT=$BITBUCKET_CLONE_DIR/.pyenv >> .env
          - echo export PYTHON_BUILD_CACHE_PATH=$BITBUCKET_CLONE_DIR/.pyenv-cache >> .env
          - echo export PRE_COMMIT_HOME=$BITBUCKET_CLONE_DIR/.pre-commit >> .env
        artifacts:
          - .env

    - step: &export-gcp-credentials
        name: Export GCP credentials
        script:
          - source .env
          - echo $TF_SERVICE_ACCOUNT_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
        artifacts:
          - key.json

    - step: &config-pyenv
        name: Configure Pyenv
        script:
          - source .env
          - mkdir -p $PYTHON_BUILD_CACHE_PATH
          - >-
            if [[ -d $PYENV_ROOT && -n "$(ls -A $PYENV_ROOT)" ]]; then
              echo "PYENV_ROOT folder exists and it's not empty"
            else
              apt update &&
              apt install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
                libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils \
                tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev &&
              git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT &&
              export PATH="$PYENV_ROOT/bin:$PATH" &&
              pyenv install $PYTHON_VERSION
            fi
        caches:
          - pyenv

    - step: &run-unit-tests
        name: Run unit tests
        script:
          - *config-poetry
          - poetry install
          - make pre-commit
          - make unit-tests
        caches:
          - poetry
          - pyenv
          - pre-commit
        artifacts:
          - .env
          - unit-tests.xml

    - step: &compile-pipelines
        name: Compile KFP pipelines
        script:
          - *config-poetry
          - gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS --verbosity error
          - make compile pipeline=training
          - make compile pipeline=deployment
          - mkdir -p output
          - cp training.json deployment.json output
          - gsutil cp -r output/ $VERTEX_PIPELINE_FILES_GCS_PATH
        caches:
          - poetry
          - pyenv
        artifacts:
          - training.json
          - deployment.json

pipelines:
  default:
    - step: *set-env-vars
    - step: *config-pyenv
    - step: *run-unit-tests
    - step: *export-gcp-credentials
    - step: *compile-pipelines
  branches:
    master:
    - step: *set-env-vars
    - step: *config-pyenv
    - step: *run-unit-tests
    - step: *export-gcp-credentials
    - parallel:
        steps:
          - step: *compile-pipelines
          - step:
              name: Push base image
              services:
                - docker
              script:
                - *config-poetry
                - make push-image
    - step:
        name: Run training pipeline
        script:
          - *config-poetry
          - make run pipeline=training
    - step:
        name: Run deployment pipeline
        script:
          - *config-poetry
          - make run pipeline=deployment
        trigger: manual
